Index: MainWin.h
===================================================================
--- MainWin.h	(revision 37534)
+++ MainWin.h	(working copy)
@@ -21,6 +21,7 @@
 #ifndef __MAIN_WIN_H
 #define __MAIN_WIN_H
 
+#include "scsi.h"
 
 #include <Window.h>
 #include <Menu.h>
@@ -128,6 +129,12 @@
 
 			void				_AdoptGlobalSettings();
 
+			int32 				_FindDrives(const char *path);
+
+			BList               fDriveList;
+			BString*            fDrivePath;
+			int32               fDriveIndex;
+
 			bigtime_t			fCreationTime;
 
 			BMenuBar*			fMenuBar;
Index: MainWin.cpp
===================================================================
--- MainWin.cpp	(revision 37534)
+++ MainWin.cpp	(working copy)
@@ -44,6 +44,9 @@
 #include <Screen.h>
 #include <String.h>
 #include <View.h>
+#include <Directory.h>
+#include <Entry.h>
+#include <Path.h>
 
 #include "AudioProducer.h"
 #include "ControllerObserver.h"
@@ -68,6 +71,7 @@
 enum {
 	M_DUMMY = 0x100,
 	M_FILE_OPEN = 0x1000,
+	M_FILE_OPEN_DISK,
 	M_FILE_NEWPLAYER,
 	M_FILE_INFO,
 	M_FILE_PLAYLIST,
@@ -692,6 +696,11 @@
 			be_app->PostMessage(&appMessage);
 			break;
 		}
+		case M_FILE_OPEN_DISK:
+		{
+			printf("MESSAGE: DISK!");
+			break;
+		}
 		case M_FILE_INFO:
 			ShowFileInfo();
 			break;
@@ -1281,6 +1290,16 @@
 	item->SetShortcut('O', 0);
 	fFileMenu->AddItem(item);
 
+	// Disk Menu
+	BString driveString("Drive");
+	int driveCount = _FindDrives("/dev/disk");
+	BMenu* diskMenu = new BMenu("Open disk"B_UTF8_ELLIPSIS);
+	for (int i = 0; i <= driveCount; i++) {
+		diskMenu->AddItem(new BMenuItem(driveString << (int32)i,
+			new BMessage(M_FILE_OPEN_DISK), 'D'));
+	}
+	fFileMenu->AddItem(new BMenuItem(diskMenu, new BMessage(M_FILE_OPEN_DISK)));
+
 	fFileMenu->AddItem(new BMenuItem("File info"B_UTF8_ELLIPSIS,
 		new BMessage(M_FILE_INFO), 'I'));
 	fFileMenu->AddItem(fPlaylistMenu);
@@ -2152,3 +2171,59 @@
 }
 
 
+int32
+MainWin::_FindDrives(const char *path)
+{
+    BDirectory dir(path);
+
+    if (dir.InitCheck() != B_OK)
+        return B_ERROR;
+
+    dir.Rewind();
+
+    BEntry entry;
+    while (dir.GetNextEntry(&entry) >= 0) {
+        BPath path;
+        const char *name;
+        entry_ref e;
+
+        if (entry.GetPath(&path) != B_OK)
+            continue;
+
+        name = path.Path();
+        if (entry.GetRef(&e) != B_OK)
+            continue;
+
+        if (entry.IsDirectory()) {
+            // ignore floppy -- it is not silent
+            if (strcmp(e.name, "floppy") == 0)
+                continue;
+            else if (strcmp(e.name, "ata") == 0)
+                continue;
+
+            // Note that if we check for the count here, we could
+            // just search for one drive. However, we want to find *all* drives
+            // that are available, so we keep searching even if we've found one
+            _FindDrives(name);
+
+        } else {
+            int devfd;
+            device_geometry g;
+
+            // ignore partitions
+            if (strcmp(e.name, "raw") != 0)
+                continue;
+
+            devfd = open(name, O_RDONLY);
+            if (devfd < 0)
+                continue;
+
+            if (ioctl(devfd, B_GET_GEOMETRY, &g, sizeof(g)) >= 0) {
+                if (g.device_type == B_CD)
+                    fDriveList.AddItem(new BString(name));
+            }
+            close(devfd);
+        }
+    }
+    return fDriveList.CountItems();
+}
